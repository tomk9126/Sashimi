{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16080\viewh7800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Algorithm for Ranking Athletes\

\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 BEGIN\ul  ScoreEvent(AthleteTimesDict)\ulnone \
    SortedTimesDict = \{:\} // Dictionaries [x,y] where x = Athlete Name (String), y = Time in seconds (Int)\
\
    //Performs an insertion sort\
    FOR each Athlete, Time in AthleteTimesDict\
        IF number of elements in SortedTimesDict = 0 THEN\
            //If SortedTimesDict is empty, add the first athlete's entry\
            SortedTimesDict[Athlete] = \{Athlete, Time\}\
        ELSE\
            Placed = False  // Flag to check if the time is placed\
            // Loop through each element in SortedTimesDict\
            For each SortedAthlete, SortedTime in SortedTimesDict\
                IF Time <= SortedTime THEN\
                    //If the current time is smaller or equal, insert it at this position\
                    Insert \{Athlete, Time\} in SortedTimesDict before SortedAthlete\
                    Placed = True  \
                    BREAK  \
                ENDIF\
            ENDFOR\
            IF Placed = False THEN\
                //If it has not been placed, it must be the largest time so far.\
                Insert \{Athlete, Time\} in SortedTimesDict at the end\
            ENDIF\
        ENDIF\
    END FOR\
\
    Return \ul RankAthletes(SortedTimesDict)  \ulnone \
END \ul ScoreEvent()\
\
\ulnone BEGIN \ul RankAthletes(SortedTimesDict)\ulnone \
    RankDict = \{\}\
    Rank = 1\
    PreviousTime = 0\
    PreviousRank = 0\
    FOR athlete, time in SortedTimesDict:\
        IF time == PreviousTime:\
            //If the current time is the same as the previous time,\
            //assign the same Rank as the previous athlete\
            RankDict[athlete] = PreviousRank\
        ELSE:\
            //If the time is different, assign the current Rank\
            RankDict[athlete] = Rank\
            PreviousRank = Rank\
	   ENDIF\
        PreviousTime = time\
        Rank += 1\
    ENDFOR\
    return RankDict\
END \ul RankAthletes()}